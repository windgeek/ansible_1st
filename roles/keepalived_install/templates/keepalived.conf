! Configuration File for keepalived

global_defs {
   notification_email {
        root@localhost                  #收件人的email地址（当keepalived出故障的时候发送给哪些用户，可以指定多个）
   }
        notification_email_from keepalived@localhost            #发件人email地址
        smtp_server 127.0.0.1           #指定smtp服务器
        smtp_connect_timeout 30         #指定链接smtp服务器超时时间间隔
        router_id {{ansible_hostname}}	#标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。
        }

	##keepalived 会定时执行脚本并对脚本执行的结果进行分析，router_id动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0，并且 weight 配置的值大于 0，
	##则优先级相应的增加。如果脚本执行结果非 0，并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。
	vrrp_script chk_nginx {
		script "{{script}}" ##检测 nginx 状态的脚本路径
		interval 4 				##检测时间间隔
		weight -20 				##如果条件成立，权重-20
	}

	## 定义虚拟路由， VI_1 为虚拟路由的标示符，自己定义名称
	vrrp_instance VI_1 {
		state BACKUP			##主节点为 MASTER， 对应的备份节点为 BACKUP
		interface em1 			##绑定虚拟 IP 的网络接口，与本机 IP 地址所在的网络接口相同， 我的是 eth1
		virtual_router_id 52 		##虚拟路由的 ID 号， 两个节点设置必须一样， 可选 IP 最后一段使用, 相同的 VRID 为一个组，他将决定多播的 MAC 地址
		mcast_src_ip {{hostvars[inventory_hostname].ansible_default_ipv4.address}}	##本机 IP 地址
		priority 100			##节点优先级， 值范围 0-254，MASTER 要比 BACKUP 高
		nopreempt			##优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题
		advert_int 1 			##组播信息发送间隔，两个节点设置必须一样， 默认 1s

	## 设置验证信息，两个节点必须一致
	authentication {
		auth_type PASS
		auth_pass k18_sjk 		##真实生产，按需求对应该过来
	}

	## 将 track_script 块加入 instance 配置块
	track_script {
		chk_nginx 			##执行 Nginx 监控的服务
	}

	## 虚拟 IP 池, 两个节点设置必须一样
	virtual_ipaddress {
		{{vip}}/24 dev {{e}} label {{e}}:0
		#10.4.41.135			##虚拟 ip，可以定义多个
	}
}
